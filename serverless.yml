service: serverless-auth0-graphql
provider:
  name: aws
  runtime: nodejs6.10
  environment:
    AUTH0_CLIENT_ID: ${file(./vars.json):AUTH0_CLIENT_ID}
    AUTH0_DOMAIN: ${file(./vars.json):AUTH0_DOMAIN}
    AUTH0_CLIENT_SECRET: ${file(./secrets.json):AUTH0_CLIENT_SECRET}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

custom:
  s3Bucket: ${file(./vars.json):S3_BUCKET_NAME}
  output:
    file: stack.json
  scripts:
    hooks:
      'deploy:createDeploymentArtifacts': npm run build
      'after:deploy:resources': npm run deploy-assets
    
plugins:
  - serverless-stack-output
  - serverless-plugin-scripts

functions:
  graphql:
    handler: handler.graphqlHandler
    events:
      - http:
          path: api/graphql
          authorizer: auth
          cors: true
          method: post
  graphiql:
    handler: handler.graphiqlHandler
    events:
      - http:
          path: api/graphiql
          method: get
  auth:
    handler: auth.auth
    cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
            - DomainName:
                'Fn::Join':
                  - ''
                  - [{Ref: ApiGatewayRestApi}, '.execute-api.us-east-1.amazonaws.com']
              Id: Api
              OriginPath: '/${self:provider.stage}'
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          CacheBehaviors:
            - AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
              TargetOriginId: Api
              MinTTL: 0
              MaxTTL: 0
              DefaultTTL: 0
              PathPattern: api/*
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: 'true'
                Cookies:
                  Forward: all
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
    StaticAssetBucket:
      Value: ${self:custom.s3Bucket}